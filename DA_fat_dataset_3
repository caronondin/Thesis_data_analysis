######## using CV to predict total fat content using dataset 3############
library(caret)
library(rpart.plot)
library(tidyverse)
library(bartMachine)
library(glmnet)

#opening the datasets 
dataset_1 <- read.csv('/Users/cnondin/Documents/THESIS/dataset/datasets for analysis /dataset_1.csv')
dataset_2 <- read.csv('/Users/cnondin/Documents/THESIS/dataset/datasets for analysis /dataset_2.csv')
dataset_3 <- read.csv('/Users/cnondin/Documents/THESIS/dataset/datasets for analysis /dataset_3.csv')
dataset_4 <- read.csv('/Users/cnondin/Documents/THESIS/dataset/datasets for analysis /dataset_4.csv')

#removing the percent fat column 
dataset <- subset(dataset_3, select = -percent_fat)

set.seed(1)

# Train Test Split 
split_index <- createDataPartition(dataset$fat, p = .8, 
                                   list = FALSE, 
                                   times = 5)
#split_index_mat <- matrix(unlist(split_index), ncol = 1)
num_iterations <- ncol(split_index)
MSE_df <- data.frame(matrix(NA, nrow = num_iterations, ncol = 5))
colnames(MSE_df) <- c('pruning', 'rf', 'boosted', 'LASSO', 'fold') #remember to add BART if you figure out how it works 
fold_numbers <- 1:num_iterations
var_df <- data.frame(matrix(NA, nrow = num_iterations, ncol = 2))
colnames(var_df) <- c('test var', 'fold')

for (i in 1:num_iterations) {
  # use ith column of split_index to create feature and target training/test sets
  train <- dataset[ split_index[,i], ] 
  test  <- dataset[-split_index[,i], ]
  features_train <- dataset[ split_index[,i], !(names(dataset) %in% c('fat'))] 
  features_test  <- dataset[-split_index[,i], !(names(dataset) %in% c('fat'))]
  target_train <- dataset[ split_index[,i], "fat"]
  target_test <- dataset[-split_index[,i], "fat"]
  
  #prunned tree
  ctrl<- trainControl(method="cv", number=5)
  
  d.tree <- train(fat ~., 
                  data =train,
                  trControl = ctrl,
                  metric = "Rsquared",
                  method = "rpart")
  
  #random forest
  r.forest <- train(fat ~., 
                    data = train,
                    trControl = ctrl,
                    metric = "Rsquared",
                    method = "ranger")
  
  #boosted tree
  xg.boost <- train(fat ~., 
                    data = train, 
                    trControl = ctrl,
                    metric = "Rsquared",
                    method = "xgbTree")
  
  # bart <- bartMachine(
  #    X = train[, !names(train) %in% "fat"],
  #   y = train$fat,
  #  )
  
  #Bayesian Additive Regression Tree
  # BART <- train(
  #  fat ~ .,                  
  ## data = train,             
  #  method = bart_model, 
  #  metric = "Rsquared", 
  #trControl = ctrl          
  #)
  
  #LASSO
  lasso<-train(y= target_train,
               x = features_train,
               trControl = ctrl, 
               metric = "Rsquared",
               method = 'glmnet', 
               tuneGrid = expand.grid(alpha = 1, lambda = 1)
               
  ) 
  
  #predicting for test
  
  # Decision Tree 
  pruned_pred = predict(d.tree, test)
  # Random Forest
  rf_pred = predict(r.forest, test)
  # XGBoost
  boost_pred = predict(xg.boost, test)
  #BART
  # bart_pred = predict(bart, test)
  #LASSO
  lasso_pred = predict(lasso, test)
  
  # Print R squared scores
  prune_MSE = mean((pruned_pred - target_test)^2)
  rf_MSE = mean((rf_pred - target_test)^2)
  boost_MSE = mean((rf_pred - target_test)^2)
  #add one for BART here 
  lasso_MSE = mean((lasso_pred - target_test)^2)
  rf_R2 = R2(rf_pred, test$fat)
  boost_R2 = R2(boost_pred, test$fat)
  #bart_R2 = R2(bart_pred, test$fat)
  lasso_R2 = R2(lasso_pred, test$fat)
  
  MSE_df[i,'pruning'] <- prune_MSE
  MSE_df[i,'rf'] <- rf_MSE
  MSE_df[i,'boosted'] <- boost_MSE
  #MSE_df[i,'BART'] <- bart_MSE
  MSE_df[i,'LASSO'] <- lasso_MSE
  MSE_df[i,'fold'] <- i
  
  #saving the variance of the test set (to calculate R2 later)
  var_df[i,'test var'] <- var(target_test)
  var_df[i, 'fold'] <- i
  
  print(paste(i, "th fold is finished"))
}

#exproting the datasets

write.csv(MSE_df, '/Users/cnondin/Documents/THESIS/CV_results/fat_ds3/MSE_fat_ds3.csv')
write.csv(var_df, '/Users/cnondin/Documents/THESIS/CV_results/fat_ds3/var_fat_ds3.csv')

